# docker-compose.production.yml
version: '3.8'

services:
  app:
    build:
      context: .
      args:
        NODE_ENV: production
    ports:
      - "3000:3000"
    env_file:
      - .env.production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    depends_on:
      - db
    networks:
      - app-network-prod

  db:
    image: mongo:latest
    volumes:
      - mongodb_data_prod:/data/db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    command: ["mongod", "--bind_ip", "0.0.0.0", "--replSet", "rs0"]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand(\"ping\").ok'"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network-prod

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network-prod
    restart: always

volumes:
  mongodb_data_prod:

networks:
  app-network-prod:
    driver: bridge