name: CI/CD Pipeline

on:
  push:
    tags:
      - "v*"

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.TAG }}
      lowercase_repo: ${{ steps.repo_name.outputs.LOWERCASE_REPO }}
    steps:
      - uses: actions/checkout@v3

      - name: Get the version
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: repo_name
        run: |
          echo "LOWERCASE_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ steps.repo_name.outputs.LOWERCASE_REPO }}:${{ steps.get_tag.outputs.TAG }}
            ghcr.io/${{ steps.repo_name.outputs.LOWERCASE_REPO }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true

  deploy-staging:
    needs: build-and-push
    if: contains(github.ref, '-rc')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            set -e
            echo "Logging into GitHub Container Registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Setting environment variables..."
            export GITHUB_REPOSITORY="${{ needs.build-and-push.outputs.lowercase_repo }}"
            export GITHUB_TOKEN="${{ secrets.GH_PAT }}"
            export TAG="${{ needs.build-and-push.outputs.tag }}"

            echo "Checking for docker-compose..."
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            echo "Deploying application..."
            REPO_DIR="anonymous-sharing"
            if [ -d "$REPO_DIR" ]; then
              cd "$REPO_DIR"
              git fetch --all
              git checkout ${TAG}
            else
              git clone --branch ${TAG} https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git "$REPO_DIR"
              cd "$REPO_DIR"
            fi

            echo "Stopping existing containers..."
            docker-compose -f docker-compose.staging.yml down

            echo "Pulling latest images..."
            TAG=${TAG} docker-compose -f docker-compose.staging.yml pull

            echo "Starting services..."
            TAG=${TAG} docker-compose -f docker-compose.staging.yml --env-file .env.staging up -d --build

            echo "Cleaning up..."
            docker image prune -f

            echo "Deployment complete!"

  deploy-production:
    needs: build-and-push
    if: "!contains(github.ref, '-rc')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            set -e
            echo "Logging into GitHub Container Registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "Setting environment variables..."
            export GITHUB_REPOSITORY="${{ needs.build-and-push.outputs.lowercase_repo }}"
            export GITHUB_TOKEN="${{ secrets.GH_PAT }}"
            export TAG="${{ needs.build-and-push.outputs.tag }}"

            echo "Checking for docker-compose..."
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found. Installing..."
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            echo "Deploying application..."
            REPO_DIR="anonymous-sharing"
            if [ -d "$REPO_DIR" ]; then
              cd "$REPO_DIR"
              git fetch --all
              git checkout ${TAG}
            else
              git clone --branch ${TAG} https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git "$REPO_DIR"
              cd "$REPO_DIR"
            fi

            echo "Stopping existing containers..."
            docker-compose -f docker-compose.production.yml down

            echo "Pulling latest images..."
            TAG=${TAG} docker-compose -f docker-compose.production.yml pull

            echo "Starting services..."
            TAG=${TAG} docker-compose -f docker-compose.production.yml --env-file .env.production up -d --build

            echo "Cleaning up..."
            docker image prune -f

            echo "Deployment complete!"
            